package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"text/template"
)

// Vulnerability holds information about a single vulnerability
type Vulnerability struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Severity    string `json:"severity"`
	Impact      string `json:"impact"`
	Remediation string `json:"remediation"`
}

// Report holds the structure of the vulnerability report
type Report struct {
	Target          string          `json:"target"`
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

// GenerateReport generates a vulnerability report in Markdown format
func GenerateReport(report Report, outputPath string) error {
	reportTemplate := `
# Vulnerability Report

**Target:** {{.Target}}

## Vulnerabilities
{{range .Vulnerabilities}}
### {{.Title}}
**Severity:** {{.Severity}}

**Description:**  
{{.Description}}

**Impact:**  
{{.Impact}}

**Remediation:**  
{{.Remediation}}

---
{{end}}
`
	tmpl, err := template.New("report").Parse(reportTemplate)
	if err != nil {
		return fmt.Errorf("error creating template: %v", err)
	}

	file, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("error creating report file: %v", err)
	}
	defer file.Close()

	return tmpl.Execute(file, report)
}

func main() {
	inputFile := flag.String("i", "report.json", "Path to the JSON file containing vulnerability data")
	outputFile := flag.String("o", "vulnerability_report.md", "Path to save the generated report")
	flag.Parse()

	if *inputFile == "" {
		fmt.Println("Error: Input file is required. Use -i flag to specify the JSON file.")
		os.Exit(1)
	}

	// Read the JSON file
	data, err := os.ReadFile(*inputFile)
	if err != nil {
		fmt.Printf("Error reading input file: %v\n", err)
		os.Exit(1)
	}

	var report Report
	err = json.Unmarshal(data, &report)
	if err != nil {
		fmt.Printf("Error parsing JSON: %v\n", err)
		os.Exit(1)
	}

	// Generate the report
	err = GenerateReport(report, *outputFile)
	if err != nil {
		fmt.Printf("Error generating report: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Vulnerability report successfully generated: %s\n", *outputFile)
}
